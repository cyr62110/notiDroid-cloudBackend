buildscript {
    repositories {
        maven { url "http://repo.spring.io/libs-snapshot" }
        mavenLocal()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.0.1.RELEASE")
    }
}

apply plugin: 'java'
apply plugin: 'spring-boot'

jar {
    baseName = 'notidroid-cloudBackend'
    version =  '1.0.0-SNAPSHOT'
}

repositories {
    mavenCentral()
    maven { url "http://repo.spring.io/snapshot" }
    maven { url "http://repo.spring.io/libs-snapshot" }
}

dependencies {
    //We are using Spring Boot to avoid the configuration of a Servlet container
    compile("org.springframework.boot:spring-boot-starter-web") {
        exclude module: "spring-boot-starter-tomcat"
    }
    //We use Jetty because this is cool
    compile("org.springframework.boot:spring-boot-starter-jetty")
    compile("org.springframework.boot:spring-boot-starter-actuator")

    //We will use the version 9 of Jetty instead of the 8 included by default with Spring Boot
    //so we can use WebSocket in our project.
    compile("org.eclipse.jetty:jetty-continuation:9+")
    compile("org.eclipse.jetty:jetty-http:9+")
    compile("org.eclipse.jetty:jetty-io:9+")
    compile("org.eclipse.jetty:jetty-jsp:9+")
    compile("org.eclipse.jetty:jetty-security:9+")
    compile("org.eclipse.jetty:jetty-server:9+")
    compile("org.eclipse.jetty:jetty-servlet:9+")
    compile("org.eclipse.jetty:jetty-util:9+")
    compile("org.eclipse.jetty:jetty-webapp:9+")
    compile("org.eclipse.jetty:jetty-xml:9+")

    //We will make this server an Oauth2 provider so we do not require an external provider
    //So we will use Spring Security Oauth
    //compile("org.springframework.boot:spring-boot-starter-security:1.0.1.RELEASE")
    //compile("org.springframework.security.oauth:spring-security-oauth2:1.0.5.RELEASE")

    //We use an embedded Neo4J for the storage of user, applications, relations
    compile ("org.neo4j:neo4j:2.0.+")

    //Storage of notification, images are delegated to a MongoDB and its GridFS
    //TODO : include mongodb

    //We are using Thymeleaf for our admin side. The client will be developed using Angular.Dart
    compile("org.springframework.boot:spring-boot-starter-thymeleaf")

    //With spring security for authentication on both side
    compile 'org.springframework.security.oauth:spring-security-oauth2:2.0.1.RELEASE'

    //We will also use bootstrap 3 to make a nice UI for the admin side
    compile("org.webjars:jquery:1.11.0")
    compile("org.webjars:bootstrap:3.1.1")

    //API and Implementation of the validation API
    runtime("javax.validation:validation-api:1.0.0.GA")
    runtime("org.apache.bval:bval-core:0.5")
    runtime("org.apache.bval:bval-jsr303:0.5")

    compile 'org.apache.commons:commons-lang3:3.3.2'

    //Spring data jpa to have spring data cool repository
    compile 'org.springframework.data:spring-data-neo4j-rest:3.1.0.RELEASE'

    //Runtime dependencies for Spring Data Neo4J
    //Javax WS API
    runtime 'javax.ws.rs:javax.ws.rs-api:2.0'
    //Jersey implementation
    runtime 'com.sun.jersey:jersey-bundle:1.18.1'

    //Commons-Lang3 utility library cause im lazy
    compile 'org.apache.commons:commons-lang3:3.3.2'

    //Commons-Validator to validate email addresses and more
    compile 'commons-validator:commons-validator:1.4.0'

    //Do not forget to test our code
    testCompile("org.springframework.boot:spring-boot-starter-test")
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.10'
}